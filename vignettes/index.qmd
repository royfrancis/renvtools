---
title: "Usage"
subtitle: "Using renvtools to read and explore renv lockfiles"
date: last-modified
date-format: "DD-MMM-YYYY"
format:
  html:
    toc: true
    number-sections: true
    code-overflow: wrap
---

Renv creates renv.lock file which is a JSON object and that can be a bit unweildy to handle. What if you want to find out how many packages you have? Or how many packages from installed from CRAN. What if you want to remove a package from the list? What if you want to compare lockfiles? And why not do it all from the comfort of R and tidy tools.

## Read lockfile

Load the library and let's read in a lock file. If paths are named, they are used in downstream functions else they are named automatically.

```{r}
library(renvtools)
# using a sample lockfile from the package
path <- file.path(system.file("extdata", package = "renvtools"), "renv-r4.4.1.lock")
# provide path to a lock file, set format to tibble
lst <- read_lock(path)
lst
```

You can get some useful information about the lockfile. You can also explore this data as you would explore a list.

```{r}
#| results: hold
get_version_r(lst)
get_version_bioc(lst)
get_version_renv(lst)
get_version_pkg(lst, "dplyr")
```

The default is to read into a list. Change `format` to **tibble** to read as table.

```{r}
tbl <- read_lock(path, format = "tibble")
tbl
```

<p style="color: #8a6d3b;background-color: #fcf8e3;border-color:#faebcc;padding: 6px;border-radius: 4px;" style="inline-block">
<i class="fas fa-exclamation-circle"></i> &nbsp; Note that the list and tibble formats may not be identical in information depending on the input especially in case of NAs and NULLs.
</p>

This gives you a tibble with all the package information. Now you can handle this like you would with any tibble.

```{r}
suppressMessages(library(dplyr))
suppressMessages(library(tidyr))

# number of packages by source
tbl |>
  group_by(Source) |>
  count()

# number of packages by repository
tbl |>
  group_by(Repository) |>
  count()

# number of packages by source and repository
tbl |>
  group_by(Source, Repository) |>
  count() |>
  pivot_wider(names_from = Repository, values_from = n)

# number of dependency packages for each package
tbl |>
  group_by(Package) |>
  summarize(N = length(unlist(Requirements)))
```

Read several lock files and you get a list of tibbles or a list of lists.

```{r}
paths <- list.files(file.path(system.file("extdata", package = "renvtools")), full.names = TRUE)
# read as list
# read_lock(paths[1:3], format = "list")
# read as tibble
read_lock(paths[1:3], format = "tibble")
```

## Write lockfile

Filter packages as needed and then write to a new lock file.

<p style="color: #8a6d3b;background-color: #fcf8e3;border-color:#faebcc;padding: 6px;border-radius: 4px;" style="inline-block">
<i class="fas fa-exclamation-circle"></i> &nbsp; Reading a lockfile and then writing it may not give identical lockfiles as NAs and NULLs may be discarded.
</p>

```{r}
#| eval: false
# exclude bioconductor packages
tbl1 <- tbl |> filter(Source != "Bioconductor")
write_lock(tbl1, "renv-mod.lock")
```

## Summarizing lock files

Summarize multiple lock files.

```{r}
paths <- list.files(system.file("extdata", package = "renvtools"), full.names = TRUE)
l <- read_lock(paths, format = "list")
d <- summarize_lock(l)
d
```

For example, visualize the difference in number of packages between lockfiles. Note that this step requires additional packages.

```{r}
#| fig-height: 5
#| fig-width: 7
library(eulerr)
plot(euler(d$pkgs[1:2]), quantities = T)
plot(euler(d$pkgs[1:3]), quantities = T)
```

```{r}
#| fig-height: 5
#| fig-width: 7
library(UpSetR)
lst <- d$pkgs
names(lst) <- basename(paths)
upset(fromList(lst), order.by = "freq")
```

## Comparing lockfiles

Compare two or more lockfiles in a pairwise manner.

```{r}
paths <- list.files(system.file("extdata", package = "renvtools"), full.names = TRUE)
l <- read_lock(paths, format = "list")
compare_lock(l)
```

```{r}
compare_lock(l)[, 1:13] %>% as.data.frame()
```

## Other details

The lists are a class of it's own called `rt_list`. This is why they are printed a bit differently. But, they can be treated like regular lists.

```{r}
path <- file.path(system.file("extdata", package = "renvtools"), "renv-r4.4.1.lock")
lst <- read_lock(path, format = "list")
lst
```

```{r}
class(lst)
```

The tibbles are also a class of it's own called `rt_tibble`. 

```{r}
path <- file.path(system.file("extdata", package = "renvtools"), "renv-r4.4.1.lock")
tbl <- read_lock(path, format = "tibble")
tbl
```

```{r}
class(tbl)
```

The `rt_tibble` objects contains only information about the packages. What about other metadata such as R version, Bioconductor version etc? These are stored as attributes along with the tibble. They are used when writing lock files. They can be accessed using `attr()`.

```{r}
attr(tbl, "metadata")
```

Or from a list of renvtools tibbles.

```{r}
paths <- list.files(file.path(system.file("extdata", package = "renvtools")), full.names = TRUE)
tbl <- read_lock(paths, format = "tibble")
lapply(tbl, attr, "metadata")
```

## Session

```{r}
sessionInfo()
```
